---
const { height, width } = Astro.props;
---

<canvas height={height} width={width} id='card'></canvas>

<script>
import * as THREE from 'three';
import {OrbitControls} from 'three/addons/controls/OrbitControls.js';

// Look into this loading thing.
document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.querySelector('#card');
    
    // Used to make sure not null
    if (canvas) {
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);

        const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true, canvas: canvas });
        renderer.setSize(canvas.clientWidth, canvas.clientHeight);

        const loader = new THREE.TextureLoader();
        function loadColorTexture( path: string ) {
            const texture = loader.load( path );
            texture.colorSpace = THREE.SRGBColorSpace;
            return texture;
        }

        
        const color = 0xFFFFFF;
        const intensity = 10;
        const light = new THREE.SpotLight(color, intensity);
        light.position.set(-1, 2, 4);
        scene.add(light);
        scene.add(light.target);

        const light1 = new THREE.SpotLight(color, intensity);
        light1.position.set(-1, 2, -4);
        scene.add(light1);
        scene.add(light1.target);

        const ambientLight = new THREE.AmbientLight(0x404040, 50); 
        scene.add(ambientLight);

        const geometry = new THREE.BoxGeometry(5, 3, .01);
        // const material = new THREE.MeshPhongMaterial({color: 0xFFFFFF, shininess: 200});  
        const normalTexture = loader.load('normal.jpg');
        
        const materials: THREE.MeshStandardMaterial[] = [
            new THREE.MeshStandardMaterial({ color: 0xFFFFFF, roughness: .8, metalness: .1}),
            new THREE.MeshStandardMaterial({ color: 0xFFFFFF, roughness: .8, metalness: .1}),
            new THREE.MeshStandardMaterial({ color: 0xFFFFFF, roughness: .8, metalness: .1}),
            new THREE.MeshStandardMaterial({ color: 0xFFFFFF, roughness: .8, metalness: .1}),
            new THREE.MeshStandardMaterial({ roughness: .8, metalness: .1, map: loadColorTexture('front.png') }),
            new THREE.MeshStandardMaterial({ roughness: .8, metalness: .1, map: loadColorTexture('back.png') }),
        ];

        // To optimize could only do it to the 2 main faces
        materials.forEach(material => {
            material.normalMap = normalTexture;
            material.normalScale.set(3, 3); 
        });

        const cube = new THREE.Mesh(geometry, materials);
        scene.add(cube);

        camera.position.z = 4.75;

        const controls = new OrbitControls( camera, renderer.domElement );
        controls.autoRotate = true;
        controls.enableDamping = true;
        controls.enableZoom = false;
        controls.enablePan = false;

        function start() {

            requestAnimationFrame( start );

            controls.update();

            renderer.render( scene, camera );

        }
        start();

        function rotateOnScroll() {
            const scrollY = window.scrollY;
            cube.rotation.y = scrollY * 0.005;
        }

        window.addEventListener('scroll', rotateOnScroll);


        // renderer.render(scene, camera);
    } else {
        console.error('Canvas element not found');
    }
});
</script>
